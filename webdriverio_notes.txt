WebdriverIO
-----------
-----------
----------

Playlist link: https://www.youtube.com/watch?v=7J3FnyEGXd4&list=PLFGoYjJG_fqqswF8qDdWNG3b-BtZfiqQn


Tutorial 1: What is WebDriverIO 
----------------------------------------------------------------------------

Its is custom implementation of seleniums W3C webdriver API.
Its written in javascript
packaged into  npm and runs on node js
It can be used for automating both web application and native mobile application
It is simple and easy to write
Project setup is also very easy
If neeed we can write our own javascript function test
It can be integrated with appium
It can run in most of the browser Eg: chrome, edge, firefox, safari, opera, htmlunit, PhantomJS
It support framework like Jasmine, mocha, cucumber
It support reporting like allure, jasmine spec reporter, junit xml reporter and cucumber reporter
It support parallel execution
In mobile, it support both android and ios
Support page object pattern
It can be integrated with CICD
Retry test logic is available


Official website:
https://webdriver.io/


For documentation:
https://webdriver.io/docs/api

This can help a lot if we stuck some where


-----------

Tutorial 2: Installation and setup:
---------------------------------

Below are required
1. java   //Should greater than 1.7 or 1.8
2. node    //node and npm should be available //Give "node -v" or "npm -v" to check the version. If not installed, install that from https://nodejs.org/en/download/
3. Vistual studio code   //We can use any ide. Here we will use Visual studio code


Open vistual studio code
File -> add folder to workspace   //Add the project folder. If not create, we can create and add

Go under workspace, then go to that folder.
Right click and open with integrated terminal
It will open terminal with that folder. 
Check we are inside the created folder or not



Then give below command to create/initialize the project
npm init      //Give all required details for creating the project

After this it will create package.json inside the root of the created folder
package.json //This is simular to pom.xml in maven project. This will have all details. dependencies etc

Give below command to install webdriverio
npm install webdriverio --save-dev            //--save-dev will add installing package as dev dependencies in package.json. so that next time when some one just use "init install", dev dependencies will be automatically downloaded


Give below command to webdriver cli command
npm install @wdio/cli

Give below command to add configuration
 .\node_modules\.bin\wdio config    //  for linux slash will be different, ./node_modules/.bin/wdio confi
//On my local machine
//mocha
//no
//default, by pressing enter
//Select other details also
//For adding service, select chromedriver or selenium standalone driver
//Give base url of the web
Then finally install

It will start installing. It will take some time to install above

node_modules has all package installed using npm
node_modules/@wdio has package installed using above

After installing we can find wdio.conf.js in root of the project. This is the configuration file


wdio.conf.js //This file all configuration. We can modify if we wanted to change some config.
We can uncommand if we wanted to use some which is commanded in the file
This is one of the important file



Give below command to install chai
npm install chai --save-dev     //chai is has assertion like testng. it will assertion

Give below command to install chai-webdriverio
npm install chai-webdriverio --save-dev     //This will have chai with webdriverio

Give below command to install local runner
npm install local-runner --save-dev   //This will dependencies will help to run locally


Open wdio.conf.js and uncommand beforeTest like below:

     beforeTest: function (test, context) {
     },

Modify like below:

     beforeTest: function (test, context) {

        const chai = require('chai')
        const chaiWebdriverio = require('chai-webdriverio').default
        chai.use(chaiWebdriverio(browser))

        global.assert = chai.assert
        global.should = chai.should
        global.expect = chai.expect
        
     },

This will add assert, should and expect of chai to use as global variable.


-------------


Tutorial 3: Write Your First Script | Element APIs | click, sendKeys and getText
---------------------------------------------------------

Go to
https://webdriver.io/

click on API.
There we can find the document.    //this will be in https://webdriver.io/docs/api
That can help more  //We can click on any option to see how to use  //It will give example / syntax

open wdio.conf.js
Give base url in baseUrl   //Eg: baseUrl: 'https://www.flipkart.com'


in wdio.conf.js, it will have specs like below
specs: [
        './test/specs/**/*.js'
    ]

//Here it will have the path of test file
If we wanted to add test in other folder, we need to add
We can modify this

I have created new folder tutorialtests under test and modified like below. We can add any folder to have test files and just give path here
specs: [
        './test/tutorialtests/**/*.js'
    ]



Open package.json, under script modify test in scripts as like below. 

"scripts": {
    "test": "node_modules/.bin/wdio ./wdio.conf.js"             //This will execute to command "node_modules/.bin/wdio ./wdio.conf.js" when we run "npm run test"
  }


//We can add more scripts here.


Create new test file firsttest.js under folder tutorialtests
 
describe('Amazon test suite', function(){                                 //describe is simular to suite
    it('Add text in search box', function(){                    //it is simular to test
        browser.url('/')                                        //This will launch the browser with given url in baseUrl in wdio.conf.js
        const searchField = $('form.nav-searchbar.nav-progressive-attribute>div.nav-fill')             //this is get the element and store element in variable //Only the css selector is supported
        searchField.setValue('Iphone watch')                   //setValue('') is to type text. simular type
    })
})



To run the test give below command:
npm run test                          //This  will launch the browser and run the test


When running the  test it will take time to launch the browser.
It is because, first it should start seleniumn standalone server, then it should run.
To run faster, download selenium standalone server in another terminal or in environment variable.
Then start the test

To download, go to below
https://www.selenium.dev/download/
Then download stable version of selenium gri
Use below command to start the standalone server. Then we use npm run test to run faster
java -jar "selenium-server-4.1.2.jar" --ext example.jar;dir standalone --port 1234

If above one not worked, then use below
java -jar selenium-server-4.1.2.jar --port 4545

then run npm run test



Example: 

describe('Amazon test suite', function(){
    it('Add text in search box', function(){
        browser.url('/')
        const searchField = $("form.nav-searchbar.nav-progressive-attribute>div.nav-fill");
        searchField.click()
        searchField.setValue('Iphone watch')
        browser.pause(3000)             //This is to pause for given millisec
    })

    it('Verify text', function(){
        browser.url('/')
        const endText = $('span.navFooterBackToTopText')
        let value = endText.getText()         //This is to get the text available in element
        console.log(value);
    })

})


We can create multiple test files and write multiple test.
If its in multiple file. those will run in parallel



IMPORTANT:
Use below to support sync 
npm install --save-dev @wdio/sync




------


Tutorial 4: Page Objects in WebdriverIO & Create WebElement in Page Class:
--------------------------------------------------------------------------
Create class for each page and maintaining elements of those pages.


Eg:
Create folder name pages under root of the project
Then create class for each page
Add method which will give elements of each element in the page.

Example:
class HomePage {
    get bigText(){
        return $('h1.h0-80')
    }

    get subText(){
        return $('div.small-banner>p.sub-text')
    }

    get support(){
        return $("//a[text()='Support']")
    }

}

module.exports = new HomePage()       //This important to export and to make it public


For test refer homepagetest in root of the project

 





single $ will return one element
doube $$ will return multiple elements


----


























---

Downb selenium-server file using below steps
Go to 
https://www.selenium.dev/downloads/
























-------------------------------
